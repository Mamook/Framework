<?php /* dev/cron/new_media_Staging.php.sample */
# TODO: As we add more services (Vimeo) we'll check for rejection and if they're rejected from everything we'll stream from the server.
# TODO: Delete video from playlists when deleting from YouTube.

/**
 * This script runs every 10 minutes. Had to escape the forward slash.
 * *\/10      00      *       *       *       /opt/local/bin/php <Full Path to Cron Folder>/dev/cron/new_media_Staging.php
 * -          -       -       -       -
 * |          |       |       |       |
 * |          |       |       |       +----- day of week (0 - 6) (Sunday=0)
 * |          |       |       +------- month (1 - 12)
 * |          |       +--------- day of month (1 - 31)
 * |          +----------- hour (0 - 23)
 * +------------- min (0 - 59)
 *
 * Edit the domains from jamtheforce.com/.dev to your domain.
 *
 * Use dev/new_mediac_Dev.php if you need this for your development machine.
 * Use dev/new_mediac_Staging.php if you need this for your staging server.
 */

# Change the directory to where this cron script is located.
chdir(dirname(__FILE__));

try
{
	# Need this for YouTube Redirect URL ($video_obj=$video_obj->getYouTubeObject(FULL_DOMAIN);).
	if(!defined('FULL_DOMAIN')) define('FULL_DOMAIN', 'jamtheforce.com/');
	# Need this for the database insert.
	if(!defined('DOMAIN_NAME')) define('DOMAIN_NAME', 'jamtheforce.com');

	# Need this for API_definitions.php
	# The domain name of the developement application. (doesn't end with a slash)
	define('DEVELOPMENT_DOMAIN', 'jamtheforce.dev');

	# Need these for database_definitions.php and email_definitions.php
	# Only need to change the RUN_ON_DEVELOPMENT definition.
	# TRUE if you want this script to work on your Development machine, FALSE for Staging and Production.
	if(!defined('RUN_ON_DEVELOPMENT')) define('RUN_ON_DEVELOPMENT', FALSE);
	if(!defined('RUN_ON_STAGING')) define('RUN_ON_STAGING', TRUE);

	# Get the Path definitions.
	require '../../data/path_definitions.php';
	# Get the database definitions.
	require DATA_FILES.'database_definitions.php';
	# Get the API definitions.
	require DATA_FILES.'API_definitions.php';
	# Get the Email definitions.
	require DATA_FILES.'email_definitions.php';
	# Get the Utility Class.
	require_once UTILITY_CLASS;
	# Get the CommandLineException class.
	require_once Utility::locateFile(MODULES.'ExceptionHandler'.DS.'CommandLineException.php');

	# Get the DB Class needed to operate with MySQL.
	require_once Utility::locateFile(MODULES.'Vendor'.DS.'ezDB'.DS.'ezdb.class.php');
	DB::init(DB_TYPE);
	$db=DB::get_instance();
	$db->quick_connect(DBUSER, DBPASS, DBASE, HOSTNAME);

	# Get the Contributor Class.
	require_once Utility::locateFile(MODULES.'User'.DS.'Contributor.php');
	# Instantiate a new Contributor object.
	$contributor_obj=new Contributor();

	# Get the Validator Class.
	require_once Utility::locateFile(MODULES.'Validator'.DS.'Validator.php');

	# Get the Video Class.
	require_once Utility::locateFile(MODULES.'Media'.DS.'Video.php');
	# Instantiate the new Video object.
	$video_obj=new Video();
	# Get the YouTube instance. Starts the YouTubeService if it's not already started.
	$youtube_obj=$video_obj->getYouTubeObject(FULL_DOMAIN);
	# Get the Audio Class.
	require_once Utility::locateFile(MODULES.'Media'.DS.'Audio.php');
	# Instantiate the new Audio object.
	$audio_obj=new Audio();
	# Get the Soundcloud instance. Starts the SoundcloudService if it's not already started.
	//$soundcloud_obj=$audio_obj->getSoundcloudObject(FULL_DOMAIN);

	# Get new uploaded audio and videos from the database.
	$get_new_media=$db->get_results('SELECT `id`, `file_name`, `api`, `contributor`, \'audio\' AS media_type FROM `'.DBPREFIX.'audio` WHERE `new` IS NULL UNION SELECT `id`, `file_name`, `api`, `contributor`, \'video\' AS media_type FROM `'.DBPREFIX.'videos` WHERE `new` IS NULL');

	# If there is any new media.
	if($get_new_media>0)
	{
		# Loop through the new media.
		foreach($get_new_media as $new_media)
		{
			# Has the media been processed? Default is TRUE.
			#	Will be changed to FALSE if the media still has "uploaded" (YouTube) status.
			$processed=TRUE;

			if(isset($new_media->file_name))
			{
				if($new_media->media_type=='audio')
				{
					# Set the path to the audio on the server.
					$audio_path=BODEGA.'audio'.DS.$new_media->file_name;
				}
				elseif($new_media->media_type=='video')
				{
					# Set the path to the video on the server.
					$video_path=BODEGA.'videos'.DS.$new_media->file_name;
				}
			}

			# Get the contributors (uploaders) information.
			$contributor_obj->getThisContributor($new_media->contributor, 'id');

			$to=$contributor_obj->getContEmail();
			$reply_to=SMTP_FROM;
			$subject=ucfirst($new_media->media_type).' status from '.DOMAIN_NAME;
			$body='';

			# Decode the `api` field.
			$api_decoded=json_decode($new_media->api);

			# Check if there is a YouTube ID set.
			#	If there is, then check YouTube for the status of the video.
			if(isset($api_decoded->youtube_id))
			{
				# Get the YouTube Video ID.
				$video_yt_id=$api_decoded->youtube_id;
				# Check the video status.
				$check_status=$youtube_obj->listVideos('status', array('id'=>$video_yt_id));

				# Did YouTube return results?
				if(!empty($check_status['items']))
				{
					# Loop through the videos from YouTube.
					foreach($check_status['items'] as $status)
					{
						if($status['status']['uploadStatus']=="uploaded")
						{
							# The video has not been processed yet so do not send an email.
							$processed=FALSE;
						}
						# Check to see if the YouTube upload was a success.
						elseif($status['status']['uploadStatus']=="processed")
						{
							# Tell the user the video was uploaded.
							$body.='Your video has been uploaded to YouTube and can be viewed at http://'.FULL_DOMAIN.'media/videos/?video='.$new_media->id;
						}
						# Check if the uploaded video status is rejected.
						elseif($status['status']['uploadStatus']=="rejected")
						{
							if(isset($new_media->file_name))
							{
								# Get the Upload class.
								require_once Utility::locateFile(MODULES.'Form'.DS.'Upload.php');
								# Instantiate an Upload object.
								$upload_obj=new Upload($video_path);
								# Delete video file from server.
								$upload_obj->deleteFile($video_path);
								# Delete rejected video from YouTube
								$youtube_obj->deleteVideo($video_yt_id);
							}

							# Need to delete the entry from the database as well.
							$db->query('DELETE FROM `'.DBPREFIX.'videos` WHERE `id` = '.$db->quote($new_media->id).' LIMIT 1');

							# Check if the rejection status was a duplicate.
							if($status['status']['rejectionReason']=="duplicate")
							{
								# Tell the user the video was a duplicate.
								$body.='Your video was rejected because it was a duplicate video';
							}
						}
					}
				}
				# There is a YouTube ID set in the `videos` table, but the video was not found on YouTube.
				else
				{
					$body.='Your video was not found on YouTube';
				}
			}
			else
			{
				# TODO: Check the server for the media.

				if($new_media->media_type=='audio')
				{
					# Tell the user the audio was uploaded.
					$body.='Your audio has been uploaded and can be viewed at http://'.FULL_DOMAIN.'media/audio/?audio='.$new_media->id;
				}
				elseif($new_media->media_type=='video')
				{
					# Tell the user the media was uploaded.
					$body.='Your video has been uploaded and can be viewed at http://'.FULL_DOMAIN.'media/videos/?video='.$new_media->id;
				}
			}

			# Update database if the media has been "processed".
			if($processed===TRUE)
			{
				# Get the Email class.
				require_once Utility::locateFile(MODULES.'Email'.DS.'Email.php');
				# Instantiate a new Email object.
				$email_obj=new Email();
				$email_obj->sendEmail($subject, $to, $body, $reply_to);

				if($new_media->media_type=='audio')
				{
					# Set new videos to old.
					$db->query('UPDATE `'.DBPREFIX.'audio` SET `new` = 0 WHERE `id` = '.$db->quote($new_media->id).' LIMIT 1');
				}
				elseif($new_media->media_type=='video')
				{
					# Set new videos to old.
					$db->query('UPDATE `'.DBPREFIX.'videos` SET `new` = 0 WHERE `id` = '.$db->quote($new_media->id).' LIMIT 1');
				}
			}
		}
	}
}
catch(Exception $e)
{
	$exception=new CommandLineException($e->getCode(), $e->getMessage(), $e->getFile(), $e->getLine(), $e->getTrace());
}